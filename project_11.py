# -*- coding: utf-8 -*-
"""Project-11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OWPCpYpQCib-AkZUWp8oJ05mWEOcEGxe
"""

import pandas as pd
df=pd.read_csv("/content/ai_financial_market_daily_realistic_synthetic.csv")

df.head()

df.columns

df.shape

df.info()

import pandas as pd

df['Date'] = pd.to_datetime(df['Date'])

df.describe()

df.isnull().sum()

df.duplicated().sum()

df['Event'].isnull().sum()

df['Event'].shape

df['Company'].unique()

df.columns

import seaborn as sns
import matplotlib.pyplot as plt
sns.histplot(data=df,x='R&D_Spending_USD_Mn',hue='Company',palette='Set2')

df.groupby('Company')['R&D_Spending_USD_Mn'].sum()/1000

df['R&D_Spending_USD_Mn'] = pd.to_numeric(df['R&D_Spending_USD_Mn'], errors='coerce')

df['R&D_Spending_USD_Mn'].dtype

sns.barplot(data=df, y='R&D_Spending_USD_Mn', x='Company', orientation='vertical',palette='Set1')
plt.title('Companies sepent in AI R&D ')
plt.grid()
plt.show()

# Grouped revenue
revenue_by_company_in_ai = df.groupby('Company')['AI_Revenue_USD_Mn'].sum() / 1000

fig, axes = plt.subplots(1, 2, figsize=(14, 6))  # side-by-side, change (2,1) for vertical

# AI Revenue
sns.barplot(data=df, y='AI_Revenue_USD_Mn', x='Company', palette='Set1', ax=axes[0])
axes[0].set_title('Companies Revenue in AI R&D')
axes[0].grid(True)

# AI R&D Spending
sns.barplot(data=df, y='R&D_Spending_USD_Mn', x='Company', palette='Set1', ax=axes[1])
axes[1].set_title('Companies Spent in AI R&D')
axes[1].grid(True)

plt.tight_layout()
plt.show()

revanuebycompanyinai

df['Month'] = df['Date'].dt.month

# Plot
sns.lineplot(data=df, x='Month', y='Stock_Impact_%',hue='Company')
plt.title('Stock Impact date wise')
plt.grid()
plt.xticks(rotation=45)
plt.show()

OpenAI=df[df['Company']=='OpenAi']
Meta=df[df['Company']=='Meta']
Google=df[df['Company']=='Google']

Google

# Filter for Google
google_df = df[df['Company'] == 'Google']

# Get the row with the max stock impact
max_row = google_df.loc[google_df['Stock_Impact_%'].idxmax()]

# Event at max stock impact
event_at_max = max_row['Event']
print(event_at_max)

max_events = df.loc[df.groupby('Company')['Stock_Impact_%'].idxmax(), ['Company', 'Event', 'Stock_Impact_%']]
print(max_events)

dfx=df.groupby('Company')['AI_Revenue_Growth_%'].sum().reset_index()

dfx

dfx = df.groupby('Company')['AI_Revenue_Growth_%'].sum().reset_index()
print(dfx)

plt.pie(
    dfx['AI_Revenue_Growth_%'],
    labels=dfx['Company'],
    autopct='%.1f%%'
)
plt.title('AI Revenue Growth by Company')
plt.show()

# Group data
dfx = df.groupby('Company')['AI_Revenue_Growth_%'].sum().reset_index()
print(dfx)

# Ensure Date is datetime
df['Date'] = pd.to_datetime(df['Date'])

# Extract year
df['Year'] = df['Date'].dt.year

# Scatter plot
import seaborn as sns
sns.scatterplot(data=df, x='Year', y='AI_Revenue_Growth_%', hue='Company')
plt.title('AI Revenue Growth by Company')
plt.show()

df.columns

Google['Year'] = pd.to_datetime(Google['Date']).dt.year

sns.lineplot(data=Google, x='Year', y='AI_Revenue_Growth_%')
plt.title('AI Growth of Google')  # match label to data
plt.grid()
plt.show()

Meta['Year'] = pd.to_datetime(Meta['Date']).dt.year

sns.lineplot(data=Meta, x='Year', y='AI_Revenue_Growth_%')
plt.title('AI Growth of Meta')  # match label to data
plt.grid()
plt.show()

OpenAI['Year'] = pd.to_datetime(OpenAI['Date']).dt.year

openai_yearly = OpenAI.groupby('Year')['AI_Revenue_Growth_%'].mean().reset_index()

sns.lineplot(data=openai_yearly, x='Year', y='AI_Revenue_Growth_%')
plt.title('AI Growth of OpenAI')
plt.grid()
plt.show()

df['Date'] = pd.to_datetime(df['Date'])
df['Year'] = df['Date'].dt.year

sns.lineplot(data=df, x='Year', y='AI_Revenue_Growth_%', hue='Company')
plt.title('AI Revenue Growth by Company')
plt.grid()
plt.show()

sns.heatmap(df.corr(numeric_only=True))

df.columns

sns.lineplot(data=df, x='Year', y='R&D_Spending_USD_Mn', label='R&D Spending')
sns.lineplot(data=df, x='Year', y='AI_Revenue_USD_Mn', label='AI Revenue')
plt.title('R&D Spending vs AI Revenue')
plt.grid()
plt.legend()
plt.show()

sns.pairplot(df)
plt.show()

df.Event.value_counts()

df[df.Event=='TensorFlow Open-Source release']

df.columns

df.groupby('Company')['R&D_Spending_USD_Mn'].mean()

df.groupby('Company')['Stock_Impact_%'].mean()

max_idx = df.groupby('Company')['Stock_Impact_%'].idxmax()
df.loc[max_idx, ['Company', 'Event', 'Stock_Impact_%']]

max_idx

